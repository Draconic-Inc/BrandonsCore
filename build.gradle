import groovy.json.JsonOutput

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

group = "com.brandon3055.brandonscore"
archivesBaseName = "BrandonsCore"

sourceSets.main.resources.srcDirs += "src/main/generated"

mod_version = "${mod_version}." + (System.getenv("BUILD_NUMBER") ?: "9999")
version = "${mc_version}-${mod_version}"
println "Starting build of ${archivesBaseName}, Version: ${mod_version}"
println "Using Neoforge: ${neo_version}, for Minecraft: ${mc_version}"

minecraft {
    mappings channel: 'official', version: mc_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods { brandonscore { source sourceSets.main } }
        }
        server {
            workingDirectory file('run')
            mods { brandonscore { source sourceSets.main } }
        }
        data {
            workingDirectory file('run')
            args '--mod', 'brandonscore', '--all', '--output', file("src/main/generated"), '--existing', file("src/main/resources")
            mods { brandonscore { source sourceSets.main } }
        }
    }
}

mixin {
    add(sourceSets.main, "mixins.brandonscore.refmap.json")
}

configurations {
    annotationProcessor.extendsFrom minecraft
}


repositories {
    mavenLocal()
    maven { url = "https://maven.covers1624.net/" }
    maven { url = "https://maven.blamejared.com/" }
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${neo_version}"


//     implementation fg.deobf("com.brandon3055.projectintelligence:ProjectIntelligence:${mc_version}-${pi_version}:universal")
    implementation fg.deobf("io.codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal")

    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
}

processResources {
    inputs.property 'mod_version', mod_version
    inputs.property 'mc_version', mc_version
    inputs.property 'ccl_version', ccl_version

    filesMatching('META-INF/mods.toml') {
        expand 'file': ['jarVersion': mod_version],
                'mc_version': mc_version,
                'neo_version': neo_version,
                'pi_version': pi_version,
                'lang_version': neo_version.split('\\.')[0],
                'ccl_version': "[${ccl_version.replace(".+", "")},${ccl_version_max})"
    }
}

def publishingMetadata = project.layout.buildDirectory.file("libs/$archivesBaseName-$version-publishing.json")
def publishingMetadataTask = tasks.register("publishingMetadata") {
    outputs.file(publishingMetadata)
    doFirst {
        publishingMetadata.get().asFile.text = JsonOutput.prettyPrint(JsonOutput.toJson([
                [
                        'displayName' : "Brandons Core ${version}",
                        'mcVersion'   : "${mc_version}",
                        'version'     : "${mod_version}",
                        'classifier'  : 'universal',
                        'modLoader'   : ['neoforge', 'forge'],
                        'curseforgeId': '231382',
                        'modrinthId'  : 'iFDWVIFV',
                        'dependencies': [
                                [
                                        'modId'       : 'codechickenlib',
                                        'type'        : 'required',
                                        'modrinthId'  : '2gq0ALnz',
                                        'curseforgeId': 'codechicken-lib-1-8'
                                ]
                        ]
                ]
        ]))
    }
}

jar {
    finalizedBy 'reobfJar'
    finalizedBy 'signJar'
    archiveClassifier = 'universal'
    manifest {
        attributes 'Specification-Title': archivesBaseName
        attributes 'Specification-Vendor': 'brandon3055'
        attributes 'Specification-Version': "1"
        attributes 'Implementation-Title': archivesBaseName
        attributes 'Implementation-Vendor': 'brandon3055'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes 'MixinConfigs': 'mixins.brandonscore.json'
    }
    from file("LICENSE")
}

tasks.register("signJar") {
    dependsOn("jar")
    dependsOn("reobfJar")

    doFirst {
        def args = [:]
        args['jar'] = jar.archiveFile.get().asFile
        if (System.getenv("KEY_STORE")) {
            args['keyStore'] = System.getenv("KEY_STORE")
            file(System.getenv("KEY_STORE_PROPS")).withReader {
                def props = new Properties()
                props.load(it)
                args.putAll(props)
            }
        } else if (project.hasProperty('keyStore')) {
            args['keyStore'] = project.getProperty('keyStore')
            args['alias'] = project.getProperty('keyStoreAlias')
            args['storePass'] = project.getProperty('keyStorePass')
            args['keyPass'] = project.getProperty('keyStoreKeyPass')
        } else {
            println "No signing properties."
            state.setOutcome(org.gradle.api.internal.tasks.TaskExecutionOutcome.UP_TO_DATE)
            didWork = false
            return
        }
        project.ant.invokeMethod('signjar', args)
    }
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'brandon3055'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        BrandonsCore(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact sourcesJar
            artifact(publishingMetadata) {
                builtBy publishingMetadataTask
                classifier 'publishing'
            }

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://github.com/brandon3055/${archivesBaseName}"
                scm {
                    url = "https://github.com/brandon3055/${archivesBaseName}"
                    connection = "scm:git:git://github.com/brandon3055/${archivesBaseName}.git"
                    connection = "scm:git:git@github.com:brandon3055/${archivesBaseName}.git"
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/brandon3055/${archivesBaseName}/issues"
                }
                licenses {
                    license {
                        name = "CoFH \"Don't Be a Jerk\" License"
                        url = "https://github.com/brandon3055/BrandonsCore/blob/master/LICENSE"
                        distribution = 'Repo'
                    }
                }
                developers {
                    developer {
                        id = 'brandon3055'
                        name = 'brandon3055'
                    }
                }
            }
        }
    }
}

signing {
    if (System.getenv('GPG_PRIVATE_KEY')) {
        useInMemoryPgpKeys(
                new File(System.getenv('GPG_PRIVATE_KEY')).text,
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (project.hasProperty('gpgPrivateKey')) {
        useInMemoryPgpKeys(
                new File(project.getProperty('gpgPrivateKey')).text,
                project.getProperty('gpgPrivateKeyPass')
        )
    } else {
        return
    }
    sign publishing.publications.BrandonsCore
}