plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "net.covers1624.signing" version '1.1.4'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

group = "com.brandon3055.brandonscore"
archivesBaseName = "BrandonsCore"

sourceSets.main.resources.srcDirs += "src/main/generated"

file('build.properties').withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def signProps = [:]
if (System.getenv("KEY_STORE")) {
    println "Using Env variables for jar signing."
    signProps['keyStore'] = System.getenv("KEY_STORE")
    file(System.getenv("KEY_STORE_PROPS")).withReader {
        def props = new Properties()
        props.load(it)
        signProps.putAll(props)
    }
} else if (project.hasProperty('keyStore')) {
    println "Using Project properties for jar signing."
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['alias'] = project.getProperty('keyStoreAlias')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
} else {
    println 'No signing secrets found, build will not be signed.'
}

config.mod_version = "${config.mod_version}." + (System.getenv("BUILD_NUMBER") ?: "9999")
version = "${config.mc_version}-${config.mod_version}"
println "Starting build of ${archivesBaseName}, Version: ${config.mod_version}"
println "Using Neoforged: ${config.neo_version}, for Minecraft: ${config.mc_version}"

minecraft {
    mappings channel: 'official', version: config.mc_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods { brandonscore { source sourceSets.main } }
        }
        server {
            workingDirectory file('run')
            mods { brandonscore { source sourceSets.main } }
        }
        data {
            workingDirectory file('run')
            args '--mod', 'brandonscore', '--all', '--output', file("src/main/generated"), '--existing', file("src/main/resources")
            mods { brandonscore { source sourceSets.main } }
        }
    }
}

mixin {
    add(sourceSets.main, "mixins.brandonscore.refmap.json")
}

processResources {
    inputs.property 'mod_version', config.mod_version
    inputs.property 'mc_version', config.mc_version
    inputs.property 'ccl_version', config.ccl_version

    filesMatching('META-INF/mods.toml') {
        expand 'file': ['jarVersion': config.mod_version],
                'mc_version': config.mc_version,
                'neo_version': config.neo_version,
                'pi_version': config.pi_version,
                'lang_version': config.neo_version.split('\\.')[0],
                'ccl_version': "[${config.ccl_version.replace(".+", "")},${config.ccl_version_max})"
    }
}

configurations {
    shadow
    implementation.extendsFrom shadow
    annotationProcessor.extendsFrom minecraft
}


repositories {
    mavenLocal()
    maven { url = "https://maven.covers1624.net/" }
    maven { url = "https://maven.blamejared.com/" }
}

dependencies {
    minecraft "net.neoforged:forge:${config.mc_version}-${config.neo_version}"


//     implementation fg.deobf("com.brandon3055.projectintelligence:ProjectIntelligence:${config.mc_version}-${config.pi_version}:universal")
    implementation fg.deobf("io.codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:universal")

    compileOnly(fg.deobf("mezz.jei:jei-${config.mc_version}-common-api:${config.jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${config.mc_version}-forge-api:${config.jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${config.mc_version}-forge:${config.jei_version}"))
}

reobf {
    shadowJar {}
    jar { enabled = false } // Disable jar.
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign shadowJar
            after 'reobfShadowJar'

            keyStore = signProps.keyStore
            alias = signProps.alias
            storePass = signProps.storePass
            keyPass = signProps.keyPass
        }
    }
}

def commonManifest = {
    attributes 'Specification-Title': archivesBaseName
    attributes 'Specification-Vendor': 'brandon3055'
    attributes 'Specification-Version': "1"
    attributes 'Implementation-Title': archivesBaseName
    attributes 'Implementation-Vendor': 'brandon3055'
    attributes 'Implementation-Version': version
    attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    attributes 'MixinConfigs': 'mixins.brandonscore.json'
}

jar.enabled = false
shadowJar {
    finalizedBy 'reobfShadowJar'
    archiveClassifier = 'universal'
    manifest commonManifest

    configurations = [project.configurations.shadow]
    from file("LICENSE")
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
    from file("LICENSE")
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'brandon3055'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        BrandonsCore(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact shadowJar
            artifact srcJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                //The publish plugin doesnt like GString's here apparently..
                url = "https://github.com/brandon3055/${archivesBaseName}".toString()
                scm {
                    url = "https://github.com/brandon3055/${archivesBaseName}".toString()
                    connection = "scm:git:git://github.com/brandon3055/${archivesBaseName}.git".toString()
                    connection = "scm:git:git@github.com:brandon3055/${archivesBaseName}.git".toString()
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/brandon3055/${archivesBaseName}/issues".toString()
                }
                licenses {
                    license {
                        name = "CoFH \"Don't Be a Jerk\" License"
                        url = "https://github.com/brandon3055/BrandonsCore/blob/master/LICENSE"
                        distribution = 'Repo'
                    }
                }
                developers {
                    developer {
                        id = 'brandon3055'
                        name = 'brandon3055'
                    }
                }
            }
        }
    }
}








///**
// * Polls the 'compile' configuration for a dependency with the given module name
// * and resolves, and returns its version. E.g: '1.2.+' will resolve to '1.2.3.4'
// *
// * @param module The module to search for.
// * @param chop If the string should be chopped on the last '-' in its string.
// * @param configuration The name of the configuration to search.
// * @param errorMissing If an error should be thrown if it can't be found.
// * @return The version string, '0' if 'errorMissing' is false and nothing was found.
// */
//def resolve(module, chop = true, configuration = 'compile', errorMissing = true) {
//    //Copy and lenient resolve the configuration, Forge cant be resolved at this time so lenient is required.
//    def filtered = configurations.getByName(configuration).copy().incoming.artifactView({ it.lenient = true }).artifacts
//            .findAll { it.id.componentIdentifier.module == module }
//            .collect { it.id.componentIdentifier.version }
//    if (filtered.size() > 1) {
//        println "WARNING: Found ${filtered.size()} Dependencies with ModuleName '${module}' in configuration '${configuration.name}'"
//    }
//    if (errorMissing && filtered.isEmpty()) {
//        throw new RuntimeException("Failed resolve dependency version for '${module}'")
//    }
//    if (filtered.isEmpty()) return "0"
//    def version = filtered.first() as String
//    if (chop) {
//        def idx = version.lastIndexOf('-')
//        return version.substring(idx + 1)
//    }
//    return version
//}
